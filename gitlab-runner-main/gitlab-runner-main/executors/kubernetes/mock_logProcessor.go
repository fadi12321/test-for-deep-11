// Code generated by mockery v2.14.0. DO NOT EDIT.

package kubernetes

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockLogProcessor is an autogenerated mock type for the logProcessor type
type mockLogProcessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: ctx
func (_m *mockLogProcessor) Process(ctx context.Context) (<-chan string, <-chan error) {
	ret := _m.Called(ctx)

	var r0 <-chan string
	if rf, ok := ret.Get(0).(func(context.Context) <-chan string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	var r1 <-chan error
	if rf, ok := ret.Get(1).(func(context.Context) <-chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

type mockConstructorTestingTnewMockLogProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// newMockLogProcessor creates a new instance of mockLogProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockLogProcessor(t mockConstructorTestingTnewMockLogProcessor) *mockLogProcessor {
	mock := &mockLogProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
